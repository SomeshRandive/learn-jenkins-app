pipeline {
    agent any

    environment {
        REMOTE_USER = 'ip172-18-0-87-cufhkrq91nsg0096tg80'
        REMOTE_HOST = 'direct.labs.play-with-docker.com'
        SSH_CREDENTIALS = 'docker_pg'  // This is the ID from Jenkins credentials
    }

    stages {
        stage('Build') {
            steps {

                // echo "Jenkins Home: ${JENKINS_HOME}"
                // sh 'env'
                // sh 'ssh-keyscan -H direct.labs.play-with-docker.com >> /var/jenkins_home/.ssh/known_hosts'

                echo "Jenkins Home: ${JENKINS_HOME}"
                echo "Remote Host: ${REMOTE_HOST}"
                echo "Remote User: ${REMOTE_USER}"
                
                // SSH command with verbose debugging
                sh ''' 
                    ssh-keyscan -H ${REMOTE_HOST} >> ~/.ssh/known_hosts 
                    ssh -t -o PubkeyAcceptedKeyTypes=ssh-rsa -i /var/jenkins_home/.ssh/id_rsa ip172-18-0-18-cufe3v8l2o9000dbi2o0@direct.labs.play-with-docker.com
                    ssh -vvv -i ${JENKINS_HOME}/.ssh/id_rsa ${REMOTE_USER}@${REMOTE_HOST} 'echo "Connected to Jenkins"; uname -a'
                '''

                // // SSH Command to check connection and perform initial commands on the remote server
                // sshCommand remote: [
                //     name: 'PWDServer',  // This should be here, not in environment block
                //     host: REMOTE_HOST,
                //     user: REMOTE_USER,
                //     credentialsId: SSH_CREDENTIALS,
                //     knownHosts: '/var/jenkins_home/.ssh/known_hosts'
                // ], command: '''
                //     echo "Jenkins Home: ${JENKINS_HOME}"
                //     sh 'env'
                //     echo "Hello from Jenkins"
                //     ssh -vvv -o PubkeyAcceptedKeyTypes=ssh-rsa $(whoami)@$(hostname)
                //     uname -a
                // '''
                
                // Build the project using npm and Docker commands locally
                sh '''
                ls -la
                node --version
                npm --version
                sh 'docker version'
                npm ci
                npm run build
                '''
            }
        }
    }
}
