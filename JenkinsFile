pipeline {
    agent any

    environment {
        REMOTE_USER = 'ip172-18-0-87-cufhkrq91nsg0096tg80'
        REMOTE_HOST = 'direct.labs.play-with-docker.com'
        SSH_CREDENTIALS = 'docker_pg_global'  // This is the ID from Jenkins credentials
    }

    stages {
        stage('Build') {
            steps {

                // echo "Jenkins Home: ${JENKINS_HOME}"
                // sh 'env'
                // sh 'ssh-keyscan -H direct.labs.play-with-docker.com >> /var/jenkins_home/.ssh/known_hosts'

                echo "Jenkins Home: ${JENKINS_HOME}"
                echo "Remote Host: ${REMOTE_HOST}"
                echo "Remote User: ${REMOTE_USER}"
                echo "SSH Key: ${env.SSH_KEY}"
                sh  'whoami'


                // below block works pretty good.
                // SSH to remote server using the private key from Jenkins credentials
//                 withCredentials([sshUserPrivateKey(credentialsId: 'docker_pg_global', keyFileVariable: 'SSH_KEY')]) {
//                     sh """
//                         ssh -v -t -o PubkeyAcceptedKeyTypes=ssh-rsa -i \$SSH_KEY ${REMOTE_USER}@${REMOTE_HOST} 'touch ~/somesh
// '
//                     """
//                 }
                // // SSH Command to check connection and perform initial commands on the remote server
                sshCommand remote: [
                    name: 'PWDServer',  // This should be here, not in environment block
                    host: REMOTE_HOST,
                    user: REMOTE_USER,
                    credentialsId: SSH_CREDENTIALS,
                    knownHosts: '/var/jenkins_home/.ssh/known_hosts',
                    useAgent: true  // Ensure SSH agent is used for authentication
                ], command: '''
                    echo "Jenkins Home: ${JENKINS_HOME}"
                    sh 'env'
                    echo "Hello from Jenkins"
                    uname -a
                '''
                
                // Build the project using npm and Docker commands locally
                sh '''
                ls -la
                node --version
                npm --version
                sh 'docker version'
                npm ci
                npm run build
                '''
            }
        }
    }
}
